# Strings_en.properties
titleAlgo=Topological Sorting (iterative)

header=Topologisches Sortieren
titleIntro=Einleitung
titleDescription=Formale Beschreibung
titleConclusion=Zusammenfassung
descriptionTextFile=description_de
introTextFile=intro_de
sourceCodeFile=sourceCode_de
lblOuterIteration=While Schleife: $0. Iteration
lblInnerIteration=Successor Schleife: $0. Iteration
lblProgress=$0/$1 Knoten besucht
conclusionFailure=Der Graph hatte Zyklen, daher gibt es keine topologische Reihenfolge der Knoten.
conclusionSuccess=Also ist $0 eine topologische Sortierung für den Graphen.
conclusionNumIterations=Es waren $0 Iterationen nötig.
conclusionComplexity1=Für jeden der n Knoten müssen wir jeden der m/n Nachfolger besuchen (m = Anzahl der Kanten).
conclusionComplexity2=Als Komplexität ergibt sich damit O(n*m/n) = O(m).

# Source code lines
sc1=L = [ ]
sc2=S = Menger der Knoten ohne eingehende Kante
sc3=solange S != [ ]
sc4=entferne einen Knoten n aus S
sc5=füge n ans Ende von L
sc6=für jeden Nachfolger m von n
sc7=lösche Kante (n,m)
sc8=wenn m keine eingehenden Kanten hat
sc9=füge m in S ein
sc10=wenn Graph G noch Kanten hat
sc11=return error (Der Graph hat einen Zyklus)
sc12=sonst
sc13=return L

# Status texts
stSEmpty=S ist leer.
stSNonEmpty=S ist nicht leer.
stRemS=Entferne $0 aus S.
stAddNToTail=Füge $0 ans Ende von L hinzu.
stConsiderSuccessor=Betrachte Nachfolger $0 von $1.
stRemEdge=Entferne Kante von $0 nach $1.
stInsertIntoS=Füge $0 an das Ende von S hinzu.
stNoSuccessors=Es gibt keine Nachfolger von $0.
stNoIncomingEdges=$0 hat keine eingehenden Kanten mehr.
stIncomingEdges=$0 hat eingehenden Kanten mehr
stEndEdgesLeft=Es sind Kanten übrig.
stEndNoEdgesLeft=Es sind keine Kanten mehr übrig.
stEndSuccess=Also haben wir eine Lösung gefunden :).
stEndFailure=Der Graph hatte daher Zyklen, daher gibt es keine Lösung.

# Chapter titles
chapIntro=Einleitung
chapFormalDesc=Formale Beschreibung
chapRunAlgo=Ausführung des Algorithmus
chapConclusion=Zusammenfassung