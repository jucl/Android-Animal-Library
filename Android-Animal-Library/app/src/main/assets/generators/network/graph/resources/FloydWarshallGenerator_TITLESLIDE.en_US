[block]
	The Floyd-Warshall algorithm uses the concept of ''dynamic programming'' to 
	determine all shortest paths between pair of nodes in a weighted graph.
[/block]
[block]
	[h2]The Algorithm[/h2]
	The graph can contain negative edges but it is assumed that no negative 
	cycles exist. In its original form the algorithm only calculates all[br]
	distances between node sin the graph. The algorithm uses three nested loops
	to run through each combination of start and end node and with each[br]
	intermediate node. The algorithm checks if a shorter route exists between
	start and end node using each intermediate node. As the algorithm also[br]
	saves the previous hop in a separate matrix the path can also be determined 
	using a reverse search.[br]
	The runtime of the Floyd-Warshall algorithm is determined by the three
	nested loops  which a re each initialized with the number of nodes in[br]
	the graph. The complexity is therefore O(|V|^3). The algorithm uses no complex
	data structure and the runtime of the algorithm is therefore acceptable[br]
	for small to medium graphs.[br]
	The algorithm can be used in networks to determine the available bandwidth
	between two nodes and to detect possible bottlenecks in data communication.
[/block]