algoName=Interpolative Search
theName=Recursive Interpolative Searching (int; EN)
algoDesc=This algorithm looks for a value passed in in a sorted array of int values. If the value is found, its position in the array is returned; otherwise, the result is -1.
codeExample=public int recursiveInterpolatedSearching(int[] array, int value, int lower, int upper) {\n  if (array == null || array.length == 0 || upper < lower ) {\n    return -1;\n  }\n  int nrElems = array.length();\n  int l = 0;\n  int r = nrElems - 1;\n  int mid = l + ((value - array[l]) * (r - l)) / (array[r] - array[l]);\n  if (value == array[mid])\n    return mid;\n  else if (value < array[mid])\n    return recursiveInterpolatedSearch(array, value, l, mid - 1);\n  return recursiveInterpolatedSearch(array, value, mid + 1, r);\n}
animTitle=Recursive Interpolative Search (int)
algoAuthor=Dr. Guido Rößling (roessling@acm.org>
algoTitle=Interpolative Search
animDesc=Description of the algorithm
adForURL=Further animations can be found at http://www.algoanim.info/Animal2 in the online repository.
nrSteps=The algorithm used a total of {0} assignments and {1} comparisons.
description.filename=resources/JavaRecursiveInterpolatedIntSearching_descr_en.txt
description.level=2
description.labelSymbol=#
code.filename=resources/JavaRecursiveInterpolatedIntSearching_code.txt
code.level=2
code.labelSymbol=#
complexity.filename=resources/JavaRecursiveInterpolatedIntSearching_complexity_en.txt
complexity.level=2
complexity.labelSymbol=#
nrAss=Assignments
nrComp=Comparisons
result=Result: {0}