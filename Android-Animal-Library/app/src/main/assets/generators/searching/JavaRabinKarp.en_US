algorithmName=Rabin-Karp
generatorName=Rabin-Karp-Algorithm
noTextInput=No text was entered.
noPatternInput=No pattern was entered.
label_Text=Text:
label_Pattern=Pattern:
comparisonCounter=Compared character pairs: {0}
compareNaive=The naive searching algorithm would have done {0} comparisons.
abortSearch=It is impossible to find matches. Aborting search.
patternNotFound=The pattern does not occur in the text.
checkInput=Check if the search can make sense.
saveTextLength=The length of the text is saved.
saveText=The text is saved as char[].
savePatternLength=The length of the pattern is saved.
savePattern=The pattern is saved as char[].
hits=The pattern was found {0} time(s).
initOccurrences=A list is created to save the occurrences of the pattern in the text.
foundPattern=The pattern was found. The location is saved and the search continues.
descriptionLine1=The Rabin-Karp algorithm is a string matching algorithm. 
descriptionLine2=In contrast to other string matching algorithms, it does not try to skip parts of the text. 
descriptionLine3=Instead, the comparisons are accelerated by hashing. 
descriptionLine4=The choice of the hash function is important. 
descriptionLine5=Using a rolling hash allows to compute a hash value from the previous text window and the new character with low effort. 
descriptionLine6=The characters of the pattern and the text window are only compared if the hash values match. 
descriptionLine7=The biggest advantage of this algorithm is that it can easily be modified to search the text for several patterns in one pass. 
explainPatternHash=The hash value of the pattern is calculated from the character codes and the positions of the characters.
patternHash=Hash value of the pattern: {0}
characterCode=The character code of {0} is {1}.
buildHash=The previous hash value is doubled by bit shifting. Then {0} is added.
finalPatternHash=The hash value of the pattern is {0}.
windowHash=The hash value of the current text window is saved temporarily.
explainI=i points at the beginning of the text window.
hashDepends=The calculation of a hash value from the previous hash value an the new character depends on the length of the pattern.
explainTextHash=The hash value of the text window is calculated from the character codes and the positions of the characters.
textHash=Hash value of the text window: {0}
searchTillEnd=The search continues until there is not enough text left for the pattern.
hashesMatch=The hash values of the text window and the pattern match. Now the characters will be compared.
explainJ=j points at the character in the pattern to compare with the text.
compareUntil=The characters are compared until a mismatch occurs or the complete pattern was found.
mismatch=The characters of the text window and the pattern do not match.
hashesDoNotMatch=The hash values of the text window and the pattern do not match.
nextWindowHash=The hash value of the next text window is calculated.
lastPosition=The last position is tested.