algorithmName=Boyer-Moore
generatorName=Boyer-Moore
noTextInput=No text was entered.
noPatternInput=No pattern was entered.
label_Text=Text:
label_Pattern=Pattern:
comparisonCounter=Compared character pairs: {0}
compareNaive=The naive searching algorithm would have done {0} comparisons.
abortSearch=It is impossible to find matches. Aborting search.
patternNotFound=The pattern does not occur in the text.
checkInput=Check if the search can make sense.
saveTextLength=The length of the text is saved.
saveText=The text is saved as char[].
savePatternLength=The length of the pattern is saved.
savePattern=The pattern is saved as char[].
hits=The pattern was found {0} time(s).
initOccurrences=A list is created to save the occurrences of the pattern in the text.
foundPattern=The pattern was found. The location is saved and the search continues.
descriptionLine1=The Boyer-Moore algorithm is a string matching algorithm. 
descriptionLine2=It begins the comparison of the pattern and the text window on the right side of the pattern.
descriptionLine3=In case of a mismatch, the text window is moved using two strategies. 
descriptionLine4=The Bad-Character strategy searches the pattern for the last position of the character in the text that caused the mismatch. 
descriptionLine5=The Good-Suffix strategy if the previously checked characters occur in the pattern again. 
descriptionLine6=The text window is moved according to the strategy that allows the larger shift. 
createTable1=A table is created to save the last occurrences of the characters in the pattern.
labelBadCharacter=Bad Character:
explainTable1=For each character in the pattern the last occurrence is saved.
createTable2=A table is created to save how many characters can be skipped when shifting the text window, depending on the number of previously matching characters.
labelGoodSuffix=Good Suffix:
createTable3=The computation of the table is done in 2 phases. Temporarily, a second table is needed for that.
explainIJ=i points at the beginning of the analyzed suffix, j is used to determine the position of the longest border for that suffix.
emptyStringEntry=An entry for the empty String as end of the pattern is created.
analyzePattern=The pattern is analyzed form the right to the left.
analyzeUntil=Analyzing continues until the temporary table is filled.
borderNotExtendable=The border cannot be extended to the left.
setSkipValue=The skip value for the suffix is saved in the table.
doNotSetSkipValue=The position in the table is already filled because a shorter suffix already had the same border.
setJ=j is set to the value from the temporary table.
nextEntry=The next entry is saved in the temporary table.
remainingEntries=Now the skip values for the case that the suffix does not occur in the pattern again are saved.
explainKL=k points at the beginning of the analyzed suffix, l is the skip value.
explainSkipValue=The skip value matches the last beginning position of the longest border of the pattern.
fillSkipMap=The skip map is filled from the left to the right.
fillSkipValue=There is no value for the suffix in the skip map yet. The value of l ({0}) is saved for the suffix.
doNotChangeSkipValue=The skip map already holds a value for the suffix. It will not be changed.
shortSuffix=When the suffix becomes too short the next shorter border is analyzed.
explainIJ2=i points at the beginning of the text window, j points at the character in the pattern to compare with the text.
searchTillEnd=The search continues until there is not enough text left for the pattern.
comparisonStart=The text window is tested from the right to the left.
compareUntil=The characters are compared until a mismatch occurs or the complete pattern was found.
moveGoodSuffix=The text window is moved according to the Good-Suffix strategy.
mismatch=The characters of the text window and the pattern do not match.
notInBadCharacterTable={0} is not in the Bad-Character table.
-1BadCharacterShift1=The Bad-Character strategy allows moving the text window by j + 1 = 1 position.
-1BadCharacterShiftVariable=The Bad-Character strategy allows moving the text window by j + 1 = {0} positions.
badCharacterShift1=The Bad-Character strategy allows moving the text window by j - {0} = 1 position.
badCharacterShiftVariable=The Bad-Character strategy allows moving the text window by j - {0} = {1} positions.
moreThanBadCharacterShift=That is more than the Bad-Character strategy allows.
sameAsBadCharacterShift=That is as much as the Bad-Character strategy allows.
lessThanBadCharacterShift=That is less than the Bad-Character strategy allows.
goodSuffixShift1=The Good-Suffix strategy allows moving the text window by one position.
goodSuffixShiftVariable=The Good-Suffix strategy allows moving the text window by {0} positions.
continue=The text window is moved by {0} characters and the search continues.
endSearch=The text window is moved beyond the end of the text. The search is finished.