algorithmName=Boyer-Moore
generatorName=Boyer-Moore
noTextInput=Es wurde kein Text eingegeben.
noPatternInput=Es wurde keine Suchmaske eingegeben.
label_Text=Text:
label_Pattern=Suchmaske:
comparisonCounter=Verglichene Zeichenpaare: {0}
compareNaive=Der naive Suchalgorithmus hätte {0} Vergleiche benötigt.
abortSearch=Es können keine Treffer auftreten. Suche wird abgebrochen.
patternNotFound=Die Suchmaske kommt im Text nicht vor.
checkInput=Hier wird überprüft, ob eine Suche überhaupt sinnvoll durchgeführt werden kann.
saveTextLength=Die Länge des Textes wird gespeichert.
saveText=Der Text wird als char[] verarbeitet.
savePatternLength=Die Länge der Suchmaske wird gespeichert.
savePattern=Die Suchmaske wird als char[] verarbeitet.
hits=Die Suchmaske wurde {0} mal gefunden.
initOccurrences=Es wird eine Liste angelegt, in der die Treffer der Suche eingetragen werden.
foundPattern=Die Suchmaske wurde gefunden. Die Stelle wird gespeichert und der restliche Text weiter durchsucht.
descriptionLine1=Der Boyer-Moore Algorithmus ist ein String-Such-Algorithmus. 
descriptionLine2=Dabei wird das untersuchte Suchfenster immer von rechts nach links mit der Suchmaske verglichen. 
descriptionLine3=Wenn beim Durchsuchen des Suchfensters ein Unterschied zur Suchmaske festgestellt wird, wird das Suchfenster anhand von 2 Regeln weiter geschoben. 
descriptionLine4=Die Bad-Character-Strategie überprüft, an welcher Stelle in der Suchmaske das Zeichen des Textes, das nicht mit der Suchmaske übereinstimmt, zum letzten mal auftritt. 
descriptionLine5=Die Good-Suffix-Strategie überprüft, ob die bisher übereinstimmenden Zeichen nochmal in der Suchmaske vorkommen. 
descriptionLine6=Das Suchfenster wird entsprechend der Regel verschoben, die die größere Verschiebung ermöglicht. 
createTable1=Es wird eine Tabelle erstellt, die das letzte Auftreten der verschiedenen Zeichen in der Suchmaske angibt.
labelBadCharacter=Bad Character:
explainTable1=Für alle vorkommenden Zeichen wird gespeichert, an welcher Stelle der Suchmaske sie das letzte mal auftreten.
createTable2=Es wird eine Tabelle erstellt die angibt, wieviele Zeichen die Suche weiterspringen kann, je nachdem wieviele Zeichen bisher übereingestimmt haben.
labelGoodSuffix=Good Suffix:
createTable3=Die Berechnung der Tabelle findet in 2 Phasen statt. Vorübergehend wird dazu eine weitere Tabelle benötigt.
explainIJ=i gibt die Anfangsposition des untersuchten Suffix an, mit j wird die Position des breitesten Randes für dieses Suffix bestimmt.
emptyStringEntry=Zunächst wird ein Eintrag für den leeren String als Ende der Suchmaske erstellt.
analyzePattern=Die Suchmaske wird von rechts nach links analysiert.
analyzeUntil=Die Analyse wird fortgesetzt, bis die temporäre Tabelle gefüllt ist.
borderNotExtendable=Der Rand lässt sich nicht nach links fortsetzen.
setSkipValue=Die Schiebedistanz für das Suffix wird in die Sprungtabelle eingetragen.
doNotSetSkipValue=Der Platz in der Sprungtabelle ist schon belegt, da ein kürzeres Suffix bereits den selben Rand hatte.
setJ=j wird der Wert aus der temporären Tabelle zugewiesen.
nextEntry=Der nächste Eintrag wird in die temporäre Tabelle geschrieben.
remainingEntries=Jetzt werden noch die Schiebedistanzen für den Fall eingetragen, dass das Suffix nicht nochmal in der Suchmaske vorkommt.
explainKL=k zeigt auf die Anfangsposition des untersuchten Suffix, l gibt die Schiebedistanz an.
explainSkipValue=Die Schiebedistanz entspricht der letzten Anfangsposition des breitesten Randes der Suchmaske.
fillSkipMap=Die Schiebetabelle wird von links nach rechts aufgefüllt.
fillSkipValue=Da in der Schiebetabelle noch kein Eintrag für das Suffix steht, wird der Wert von l ({0}) eingetragen.
doNotChangeSkipValue=In der Schiebetablle steht bereits ein Eintrag für das Suffix. Dieser wird nicht verändert.
shortSuffix=Wenn das Suffix zu kurz wird, wird auf den nächstkürzeren Rand umgestellt.
explainIJ2=i zeigt auf den Anfang der zu untersuchenden Textstelle, j auf das jeweilige Zeichen in der Suchmaske.
searchTillEnd=Es wird solange gesucht, bis nicht mehr so viel Text übrig ist dass die Suchmaske darin vorkommen kann.
comparisonStart=Der Vergleich beginnt auf der rechten Seite des Suchfensters.
compareUntil=Die Zeichen werden verglichen, bis ein Unterschied auftritt oder die ganze Suchmaske gefunden wurde.
moveGoodSuffix=Das Suchfenster wird entsprechend der Good-Suffix-Strategie weiter geschoben.
mismatch=Die Zeichen von Suchfenster und Suchmaske stimmen nicht überein.
notInBadCharacterTable={0} kommt nicht in der Bad-Character-Tabelle vor.
-1BadCharacterShift1=Die Bad-Character-Strategie ermöglicht eine Verschiebung um j + 1 = 1 Stelle.
-1BadCharacterShiftVariable=Die Bad-Character-Strategie ermöglicht eine Verschiebung um j + 1 = {0} Stellen.
badCharacterShift1=Die Bad-Character-Strategie ermöglicht eine Verschiebung um j - {0} = 1 Stelle.
badCharacterShiftVariable=Die Bad-Character-Strategie ermöglicht eine Verschiebung um j - {0} = {1} Stellen.
moreThanBadCharacterShift=Das ist mehr, als die Bad-Character-Strategie ermöglicht.
sameAsBadCharacterShift=Das ist genau so viel, wie auch die Bad-Character-Strategie ermöglicht.
lessThanBadCharacterShift=Das ist weniger, als die Bad-Character-Strategie ermöglicht.
goodSuffixShift1=Die Good-Suffix-Strategie ermöglicht eine Verschiebung um eine Stelle.
goodSuffixShiftVariable=Die Good-Suffix-Strategie ermöglicht eine Verschiebung um {0} Stellen.
continue=Das Suchfenster wird um {0} Zeichen verschoben und die Suche fortgesetzt.
endSearch=Das Suchfenster wird über das Ende des Textes hinaus geschoben. Die Suche ist beendet.