algorithmName=Rabin-Karp
generatorName=Rabin-Karp
noTextInput=Es wurde kein Text eingegeben.
noPatternInput=Es wurde keine Suchmaske eingegeben.
label_Text=Text:
label_Pattern=Suchmaske:
comparisonCounter=Verglichene Zeichenpaare: {0}
compareNaive=Der naive Suchalgorithmus hätte {0} Vergleiche benötigt.
abortSearch=Es können keine Treffer auftreten. Suche wird abgebrochen.
patternNotFound=Die Suchmaske kommt im Text nicht vor.
checkInput=Hier wird überprüft, ob eine Suche überhaupt sinnvoll durchgeführt werden kann.
saveTextLength=Die Länge des Textes wird gespeichert.
saveText=Der Text wird als char[] verarbeitet.
savePatternLength=Die Länge der Suchmaske wird gespeichert.
savePattern=Die Suchmaske wird als char[] verarbeitet.
hits=Die Suchmaske wurde {0} mal gefunden.
initOccurrences=Es wird eine Liste angelegt, in der die Treffer der Suche eingetragen werden.
foundPattern=Die Suchmaske wurde gefunden. Die Stelle wird gespeichert und der restliche Text weiter durchsucht.
descriptionLine1=Der Rabin-Karp-Algorithmus ist ein String-Such-Algorithmus. 
descriptionLine2=Anders als andere String-Such-Algorithmen versucht er nicht, Teile des Textes zu überspringen. 
descriptionLine3=Die Vergleiche werden stattdessen durch die Verwendung von Hash-Werten beschleunigt. 
descriptionLine4=Die Wahl der Hash-Funktion ist dabei wichtig. 
descriptionLine5=Die Verwendung einer rollenden Hash-Funktion erlaubt es, mit geringem Aufwand den Hash-Wert einer Textstelle aus dem vorherigen Hash-Wert zu berechnen. 
descriptionLine6=Nur wenn der Hash-Wert der Textstelle mit dem Hash-Wert der Suchmaske übereinstimmt werden die Zeichen verglichen. 
descriptionLine7=Der grösste Vorteil dieses Algorithmus ist, dass man ihn leicht abwandeln kann um den Text in einem Durchgang mit verschiedenen Suchmasken zu vergleichen. 
explainPatternHash=Der Hashwert der Suchmaske errechnet sich aus den Zahlencodes und den Positionen der einzelnen Zeichen.
patternHash=Hashwert der Suchmaske: {0}
characterCode=Der Zahlencode von {0} ist {1}.
buildHash=Der bisherige Hashwert wird durch Bitverschiebung verdoppelt und danach um {0} erhöht.
finalPatternHash=Der Hashwert der Suchmaske beträgt {0}.
windowHash=Der Hashwert der gerade untersuchten Textstelle wird immer vorübergehend gespeichert.
explainI=i zeigt auf den Anfang der zu untersuchenden Textstelle.
hashDepends=Die Berechnung eines Hashwertes aus seinem Vorgänger und dem neuen Zeichen hängt von der Länge der Suchmaske ab.
explainTextHash=Der Hashwert des Suchfensters errechnet sich aus den Zahlencodes und den Positionen der einzelnen Zeichen.
textHash=Hashwert der Textstelle: {0}
searchTillEnd=Es wird solange gesucht, bis nicht mehr so viel Text übrig ist dass die Suchmaske darin vorkommen kann.
hashesMatch=Die Hashwerte von Suchfenster und Suchmaske stimmen überein. Jetzt werden die Zeichen verglichen.
explainJ=j zeigt auf das jeweilige Zeichen der Suchmaske.
compareUntil=Die Zeichen werden verglichen, bis ein Unterschied auftritt oder die ganze Suchmaske gefunden wurde.
mismatch=Die Zeichen von Suchfenster und Suchmaske stimmen nicht überein.
hashesDoNotMatch=Die Hashwerte von Suchfenster und Suchmaske stimmen nicht überein.
nextWindowHash=Der Hashwert des nächsten Suchfensters wird berechnet.
lastPosition=Die letzte Position wird überprüft.