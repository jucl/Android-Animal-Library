@import=resources/GenericSettings
algoDesc=The Lempel-Ziv-Welch (LZW) algorithm is a lossless compression algorithm. It uses a dictionary to replace character sequences that occur multiple times in the text by a key. For the textual input demonstrated here, each character is represented by its ASCII value.
algoAuthor=Florian Lindner
animDesc=Description of the algorithm
adForURL=Further animations are provided at http://www.algoanim.info/Animal2
nrSteps=The algorithm used a total of {0} assignments and {1} comparisons.
nrAss=Assignments
nrComp=Comparisons
inWords=Verbal description
step00=0) At runtime, the algorithm will construct a dictionary.
step01=   Single character are encoded according to the ASCII standard,
step02=   occupying the positions 0 to 255. Element 256+ will be created later
step1=1) Iterate over the input character by character
step2=2) Examine for each position the preceding character or a prefix built in step 3)
step3=3) If the combination of prefix and current char is contained in the dictionary,
step31=   add the current character to the prefix and continue with the next char in 2)
step4=4) Otherwise, encode the prefix of the current char based on the dictionary;
step41=   then concatenate prefix and current char and add this to the dictionary; go to 2)
output=Output:
noDict=The dictionary does not have to be included, as it can
finish=be generated on the fly during decompression.