algorithmName=Horspool-Raita
generatorName=Boyer-Moore-Horspool-Raita
noTextInput=No text was entered.
noPatternInput=No pattern was entered.
label_Text=Text:
label_Pattern=Pattern:
comparisonCounter=Compared character pairs: {0}
compareNaive=The naive searching algorithm would have done {0} comparisons.
abortSearch=It is impossible to find matches. Aborting search.
patternNotFound=The pattern does not occur in the text.
checkInput=Check if the search can make sense.
saveTextLength=The length of the text is saved.
saveText=The text is saved as char[].
savePatternLength=The length of the pattern is saved.
savePattern=The pattern is saved as char[].
hits=The pattern was found {0} time(s).
initOccurrences=A list is created to save the occurrences of the pattern in the text.
foundPattern=The pattern was found. The location is saved and the search continues.
descriptionLine1=The Boyer-Moore-Horspool-Raita algorithm is a string matching algorithm.  
descriptionLine2=It begins with checking the last, then the first, then the middle character of the text window. After that, the remaining characters are compared. 
descriptionLine3=In case of a mismatch, the text window is moved until the character after the old window matches the last position of that character in the pattern, with the exception of the last character of the pattern. 
descriptionLine4=If the character does not occur in the pattern or only at the last position, the text window is moved by the length of the pattern. 
descriptionLine5=For more information about this algorithm, see : 'Tuning the boyer-moore-horspool string searching algorithm' in 'Software: Practice and Experience Volume 22, Issue 10' 
descriptionLine6=and 'On tuning the boyer-moore-horspool string searching algorithm' in 'Software: Practice and Experience Volume 24, Issue 4'. 
createTable=A table is created to save how many characters can be skipped in case of a mismatch.
skipMap=Skip map:
analyzePattern=The pattern is analyzed, with the exception of the last character.
explainTable=The last position of each occurring character is saved, ignoring the last position of the pattern.
explainIJ=i points at the beginning of the text window, j points at the character in the pattern to compare with the text.
searchTillEnd=The search continues until there is not enough text left for the pattern.
compareLast=First of all, the last character of the text window is compared with the pattern.
compareFirst=Then, the first character of the text window is compared with the pattern.
compareMiddle=Then, the middle character of the text window is compared with the pattern.
alreadyDone=The pattern is very short and has already been found completely.
comparisonStart=The text window is tested from the left to the right, with exception of the first and the last character.
notInSkipMap={0} is not in the skip map.
moveWindowMax=The text window can be moved by one more character than the pattern's length.
moveWindow1=The text window can be moved by one character.
moveWindowVariable=The text window can be moved by {0} characters.
continue=The text window is moved by {0} characters and the search continues.
endSearch=The text window is moved beyond the end of the text. The search is finished.
mismatch=The characters of the text window and the pattern do not match.