algoDesc=AODV is a reactive routing algorithm for mobile ad-hoc networks.
aodvAnimation=The animation shows in the right corner the graph on which the algorithm is performed and shows the route establishment from the start to the endnode. The message flooding process is visualized and the routing table of each node is shown in the left corner with updated and highlighted information after each routing step. Initially each node only knows his direct neighbor. 
aodvFunc=If a node needs a route to a destination node, it first checks if such a route already exists in his own routing table. If not, according to AODV the node floods the network a route-request message (RREQ). Each node which gets this message checks, if it is the desired destination node, if this is not the case either has a route to the destination node or is has to forward the message further in the network. If is the destination node requested by the initial sender, or if it has a route to the requested destination, it answers the sender with a route-reply message (RREP). The message uses the path along the way the initial RREQ traveled earlier. In their own routing table, each node keeps track of the information about routes to all known nodes in the network, for each route it stores a sequence number, a next hop node and a number of hops required to reach the destination node. The sequence number in this routing entry is used to keep only fresh routes and to prevent loops in the flooding process. 
algoName=Ad-hoc On-demand Distance Vector Routing
algoComplexTitle=Complexity of AODV
algoComplexity=The main goal of AODV is to reduce the amount of necessary messaged inside an ad-hoc network. Therefore routes only get requested on demand. The sequence numbers are an efficient way of keeping information about the freshness of a route and to avoid loops in the flooding process. New nodes can efficiently join the network, because beside the destination and sender node, all other nodes also keep track of requested routes and can therefore answer a RREQ message from a new node directly with an RREP message. 
animDesc=Ad-hoc On-demand Distance Vector Routing (AODV) is a reactive topology based routing algorithm suitable for mobile ad-hoc networks. Routes get requested on demand and afterwards get stored in routing tables kept by each individual node.  

errorMessageTitle=Error during validation of properties
errorMessageWrongNumberNodes=Source and Destination Node are not properly configured
errorMessageStartNodeNotFound=Given Source node is not part of the given graph
errorMessageDestinationNodeNotFound=Destination node is not part of the given graph
forwardRREP=Node {0} forwards the RREP in the direction of the destination node, using unicast.
forwardRREQ=Node {0} checks, whether the seq# of start or destination node in the RREQ are higher than in its routing table. If this is the case, it updates them. Then, it broadcasts the RREQ to its neighbors.

infoBox=Explanations

node=Node

receiveRREP=The start node receives the RREQ, and with that knows the route to the destination. Before actually sending data, it acknowledges the RREQ with an ACK, but it knows the route now.
routeExists=The start node {0} already knows a route to node {1}. For this reason, it is not necessary to perform a new route discovery. Node {0} starts to send data immediately using the known route.

sendRREP=The current node forwards the RREP to the destination based on the information (next hop) in its routing table.
sendFastRREP=The current node {0} already has a route to node {1}.
sendRREQ=The current node increases the hop count of the RREQ, and broadcasts it to its neighbors.
startAnimation=Animation
startFunctionality=Functionality
startPageTitle=Routing
startRouteDiscovery=The start node {0} initializes the route discovery when it cannot find a route to the destination node {1} in its routing table.
startRouteReply=The destination node replies to a Route Request (RREQ) with a Route Reply (RREP). It increments its sequence number by one, and sends the RREP back to the start node using unicast.
statTableTitle=Statistics
startNode=Source Node
endNode=Destination Node
to=From {0} to {1}
